topic:mykafka
zookeeper.addr:
#设置kafka集群地址
bootstrap.servers:192.168.81.131:9092,192.168.81.132:9092,192.168.81.133:9092
#设置消费者组，组名字自定义，组名字相同的消费在一个组
group.id:login,update,add
#开启offset自动提交
enable.auto.commit:true
#自动提交时间间隔
auto.commit.interval.ms:1000
#序列化器
key.deserializer:org.apache.kafka.common.serialization.StringDeserializer
value.deserializer:org.apache.kafka.common.serialization.StringDeserializer
#设置从broker读取消息时最小的数据量，当消费者从broker读取消息时，
#如果数据量小于这个阈值，broker会等待直到有足够的数据，然后才返回给消费者
#fetch.min.bytes:1000
#指定了消费者读取时最长等待时间，从而避免长时间阻塞,默认500ms(单位:ms)
#fetch.max.wait.ms:500
#指定了每个分区返回的最多字节数(单位:mb)，必须要比broker能够接收的最大的消息，默认1m
#max.partition.fetch.bytes:1
#这个参数设置消费者会话过期时间，默认为3秒
#session.timeout.ms:3
#这个参数指定了当消费者第一次读取分区或者上一次的位置太老（比如消费者下线时间太久）时的行为，
#可以取值为latest（从最新的消息开始消费）或者earliest（从最老的消息开始消费）。
#auto.offset.reset:
#消费组消费消费者的策略，默认有两种策略：
#范围（Range）：对于每个主题，每个消费者负责一定的连续范围分区。
# 假如消费者C1和消费者C2订阅了两个主题，这两个主题都有3个分区，
# 那么使用这个策略会导致消费者C1负责每个主题的分区0和分区1（下标基于0开始），
# 消费者C2负责分区2。可以看到，如果消费者数量不能整除分区数，那么第一个消费者会多出几个分区（由主题数决定）。
#轮询（RoundRobin）：对于所有订阅的主题分区，按顺序一一的分配给消费者。
# 用上面的例子来说，消费者C1负责第一个主题的分区0、分区2，以及第二个主题的分区1；其他分区则由消费者C2负责。
# 可以看到，这种策略更加均衡，所有消费者之间的分区数的差值最多为1。
#partition.assignment.strategy设置了分配策略，默认为org.apache.kafka.clients.consumer.RangeAssignor（使用范围策略），
# 你可以设置为org.apache.kafka.clients.consumer.RoundRobinAssignor（使用轮询策略），
# 或者自己实现一个分配策略然后将partition.assignment.strategy指向该实现类。
#partition.assignment.strategy:org.apache.kafka.clients.consumer.RangeAssignor
#这个参数控制一个poll()调用返回的记录数，这个可以用来控制应用在拉取循环中的处理数据量。
#max.poll.records:
#这两个参数控制读写数据时的TCP缓冲区，设置为-1则使用系统的默认值。如果消费者与broker在不同的数据中心，
#可以一定程度加大缓冲区，因为数据中心间一般的延迟都比较大。
#receive.buffer.bytes、send.buffer.bytes:

